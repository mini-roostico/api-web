name: CI/CD Process
on:
  workflow_call:
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  check-secrets:
    runs-on: ubuntu-24.04
    outputs:
      run-with-secrets: ${{ steps.require-secrets.outputs.run-with-secrets }}
    steps:
      - name: Find if secrets are available
        id: detect-secrets
        uses: DanySK/are-secrets-available@1.0.0
        with:
          secrets: ${{ toJson(secrets) }}
      - name: Set condition
        id: require-secrets
        run: |
          echo "run-with-secrets=${{ steps.detect-secrets.outputs.has-secrets == 'true' && !github.event.repository.fork }}" >> $GITHUB_OUTPUT

  precompute-next-version:
    strategy:
      matrix:
        submodule: [ common, auth, api ]
    runs-on: ubuntu-24.04
    outputs:
      will-release: ${{ steps.compute-next-version.outputs.will-release }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0
      - name: Compute next release version
        id: compute-next-version
        uses: nicolasfara/precompute-semantic-release-version-action@2.0.2
        with:
          github-token: ${{ github.token }}

  verdaccio-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Build Verdaccio Docker Image
        run: |
          cd verdaccio
          touch conf/htpasswd
          echo ${{ secrets.HTPASSWD }} >> conf/htpasswd
          docker build -t c-verdaccio .
          docker run -d --name verdaccio -p 4873:4873 c-verdaccio
      - name: Wait for Verdaccio to be ready
        run: |
          for i in {1..30}; do
            if curl --silent --fail http://localhost:4873/-/ping; then
              echo "Verdaccio is ready!"
              exit 0
            fi
            echo "Waiting for Verdaccio..."
            sleep 2
          done
          echo "Verdaccio did not start in time" >&2
          exit 1
      - name: Configure npm to use Verdaccio
        run: |
          echo "//localhost:4873/:_authToken=\"${{ secrets.VERDACCIO_PASSWD }}\"" > ~/.npmrc
          echo "always-auth=true" >> ~/.npmrc
      - name: Publish local package
        run: |
          cd common
          npm ci
          npm publish --registry http://localhost:4873/

  check:
    strategy:
      matrix:
        submodule: [ common, auth, api ]
    runs-on: ubuntu-24.04
    needs:
      - verdaccio-build
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - run: |
          cd ${{ matrix.submodule }}
          npm ci
          npm run lint:check
          npm run format:check

  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ windows-2022, macos-14, ubuntu-24.04 ]
    runs-on: ${{ matrix.os }}
    needs:
      - check-secrets
      - check
    steps:
      - name: Checkout
        uses: DanySK/action-checkout@0.2.22
      - uses: actions/setup-node@v4.1.0
#      - name: Publish with Verdaccio
#        uses: verdaccio/github-actions/publish@master
#        working-directory: common
      - name: Install dependencies and run tests
        run: |
          cd api && npm ci && npm run build && npm run test --passWithNoTests
          cd ../auth && npm ci && npm run build && npm run test --passWithNoTests
          cd ..

  release:
    strategy:
      matrix:
        submodule: [ common, auth, api ]
    concurrency:
      # Only one release job at a time per branch, as only master releases.
      # Strictly sequential.
      group: release-${{ github.event.number || github.ref }}
    permissions: write-all
    runs-on: ubuntu-24.04
    needs:
      - check-secrets
      - check
      - build
    if: |
      always() &&
      needs.check-secrets.outputs.run-with-secrets == 'true' &&
      needs.check.result == 'success'
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
        with:
          token: ${{ secrets.DEPLOYMENT_TOKEN }}
      - name: Run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd ${{ matrix.submodule }}
          npm install
          npm ci
          npx semantic-release

  deploy-to-registry:
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    concurrency:
      group: deploy-to-registry-${{ github.event.number || github.ref }}
    runs-on: ubuntu-24.04
    needs:
      - precompute-next-version
      - release
    if: |
      !cancelled() &&
      !contains(needs.precompute-next-version.result, 'failure') &&
      needs.precompute-next-version.outputs.will-release == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

  success:
    runs-on: ubuntu-latest
    needs:
      - build
      - check
      - release
      - deploy-to-registry
    if: >-
      always() && (
        contains(join(needs.*.result, ','), 'failure')
        || !contains(join(needs.*.result, ','), 'cancelled')
      )
    steps:
      - name: Verify that there were no failures
        run: ${{ !contains(join(needs.*.result, ','), 'failure') }}