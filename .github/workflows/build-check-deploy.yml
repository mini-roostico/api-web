name: CI/CD Process
on:
  workflow_call:
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  check-secrets:
    runs-on: ubuntu-24.04
    outputs:
      run-with-secrets: ${{ steps.require-secrets.outputs.run-with-secrets }}
    steps:
      - name: Find if secrets are available
        id: detect-secrets
        uses: DanySK/are-secrets-available@1.0.0
        with:
          secrets: ${{ toJson(secrets) }}
      - name: Set condition
        id: require-secrets
        run: |
          echo "run-with-secrets=${{ steps.detect-secrets.outputs.has-secrets == 'true' && !github.event.repository.fork }}" >> $GITHUB_OUTPUT

  precompute-next-version:
    runs-on: ubuntu-24.04
    outputs:
      will-release: ${{ steps.compute-next-version.outputs.will-release }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0
      - name: Compute next release version
        id: compute-next-version
        uses: nicolasfara/precompute-semantic-release-version-action@2.0.2
        with:
          github-token: ${{ github.token }}

      - name: Look workspace
        run: |
          echo ${{ github.workspace }}
          ls -la ${{ github.workspace }}
          

  test-and-check:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        module: [ api, auth ]

    services:
      verdaccio:
        image: verdaccio/verdaccio:6
        ports:
        - 4873:4873
        volumes:
          - ${{ github.workspace }}/common/conf:/verdaccio/conf
        options: >-
          --health-cmd "curl --silent --fail http://localhost:4873/-/ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    needs:
      - check-secrets
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run tests on the common project
        run: |
          cd common
          npm run check

      - name: Configure npm to use Verdaccio
        run: |
          echo "//localhost:4873/:_authToken=\"fake-token\"" > ~/.npmrc
          echo "always-auth=true" >> ~/.npmrc

      - name: Publish common package
        run: |
          cd common
          npm publish --registry http://localhost:4873/

      - name: Install dependencies
        run: |
          cd ${{ matrix.module }}
          npm install --registry http://localhost:4873/

      - name: Run checks
        run: cd ${{ matrix.module }} && npm run check


  release:
    concurrency:
      # Only one release job at a time per branch, as only master releases.
      # Strictly sequential.
      group: release-${{ github.event.number || github.ref }}
    permissions:
      contents: write
      issues: write
      pull-requests: write
    runs-on: ubuntu-24.04
    needs:
      - check-secrets
      - test-and-check
    if: |
      always() &&
      needs.check-secrets.outputs.run-with-secrets == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
        with:
          token: ${{ secrets.DEPLOYMENT_TOKEN }}
      - uses: actions/setup-node@v4.2.0
        with:
          cache: npm
          node-version: lts/*
      - name: Run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          npm ci
          npx semantic-release

  deploy-to-registry:
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    concurrency:
      group: deploy-to-registry-${{ github.event.number || github.ref }}
    runs-on: ubuntu-24.04
    needs:
      - check-secrets
      - test-and-check
      - precompute-next-version
      - release
    if: |
      !cancelled() &&
      !contains(needs.precompute-next-version.result, 'failure') &&
      needs.precompute-next-version.outputs.will-release == 'true'
    strategy:
      matrix:
        service: [ api, auth ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Log in to the Container registry
        uses: docker/login-action@327cd5a69de6c009b9ce71bce8395f28e651bf99
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@8e1d5461f02b7886d3c1a774bfbd873650445aa2
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@ca877d9245402d1537745e0e356eab47c3520991
        with:
          context: ${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}-${{ matrix.service }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

  success:
    runs-on: ubuntu-latest
    needs:
      - test-and-check
      - release
      - deploy-to-registry
    if: >-
      always() && (
        contains(join(needs.*.result, ','), 'failure')
        || !contains(join(needs.*.result, ','), 'cancelled')
      )
    steps:
      - name: Verify that there were no failures
        run: ${{ !contains(join(needs.*.result, ','), 'failure') }}